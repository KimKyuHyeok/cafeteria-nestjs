generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Company {
  id  Int   @id() @default(autoincrement())
  name String
  password String
  registrationNumber String @unique()
  manager   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  CompanyUser CompanyUser[]
  coupon Coupon[]
  companyCard CompanyCard[]
  payments Payments[]
}

model User {
  id        Int      @id() @default(autoincrement())
  name      String
  phoneNumber String
  email     String   @unique()
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  CompanyUser CompanyUser[]
  usageHistory UsageHistory[]
}

model CompanyUser {
  id      Int     @id() @default(autoincrement())
  companyId  Int
  company Company @relation(fields: [companyId], references: [id])
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
  status  Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([companyId, status, userId], name: "companyId_status_userId")
 }

model Coupon {
  id      Int @id @default(autoincrement())
  companyId Int
  company Company @relation(fields: [companyId], references: [id])
  restaurantId  Int
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  paymentsId   Int
  payments Payments @relation(fields: [paymentsId], references: [id])
  count   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  usageHistory UsageHistory[]
}

model CompanyCard {
  id    Int @id @default(autoincrement())
  companyId Int
  company Company @relation(fields: [companyId], references: [id])
  cardToken String
  cardType  String
  cardLast4Digits String
  cardHolderName  String
  expiryMonth String
  expiryYear  String
  isDefault   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Payments {
  id    Int   @id @default(autoincrement())
  companyId Int
  company Company @relation(fields: [companyId], references: [id])
  orderId String
  amount  Int
  paymentMethod String
  paymentStatus String
  transactionId String
  paymentDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  coupon Coupon[]
}

model Restaurant {
  id    Int   @id @default(autoincrement())
  name String
  address String
  image   String  @default("normal")
  price   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  usageHistory UsageHistory[]
  coupon Coupon[]
}

model UsageHistory {
  id    Int   @id @default(autoincrement())
  couponId  Int
  coupon Coupon @relation(fields: [couponId], references: [id])
  restaurantId Int
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}